#!/usr/bin/env python3
"""
SyncDub MVP - Script de pruebas b√°sicas
Verifica que todos los componentes est√©n funcionando correctamente
"""

import os
import sys
import requests
import time
from pathlib import Path

def test_imports():
    """Probar que todas las dependencias se puedan importar"""
    print("üß™ Probando importaciones...")
    
    try:
        import flask
        print("‚úÖ Flask importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Flask: {e}")
        return False
    
    try:
        import whisper
        print("‚úÖ Whisper importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Whisper: {e}")
        return False
    
    try:
        from sentence_transformers import SentenceTransformer
        print("‚úÖ Sentence Transformers importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Sentence Transformers: {e}")
        return False
    
    try:
        import ffmpeg
        print("‚úÖ FFmpeg-python importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando FFmpeg-python: {e}")
        return False
    
    try:
        from pydub import AudioSegment
        print("‚úÖ PyDub importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando PyDub: {e}")
        return False
    
    return True

def test_directories():
    """Probar que los directorios necesarios existan"""
    print("\nüìÅ Probando estructura de directorios...")
    
    required_dirs = [
        'uploads',
        'output', 
        'models',
        'app',
        'static',
        'templates'
    ]
    
    all_exist = True
    for dir_name in required_dirs:
        if os.path.exists(dir_name):
            print(f"‚úÖ Directorio {dir_name} existe")
        else:
            print(f"‚ùå Directorio {dir_name} no existe")
            all_exist = False
    
    return all_exist

def test_config():
    """Probar que la configuraci√≥n sea v√°lida"""
    print("\n‚öôÔ∏è Probando configuraci√≥n...")
    
    try:
        from config import Config
        config = Config()
        
        # Verificar directorios de configuraci√≥n
        if config.UPLOAD_FOLDER.exists():
            print("‚úÖ Directorio de uploads configurado correctamente")
        else:
            print("‚ùå Directorio de uploads no existe")
            return False
        
        if config.OUTPUT_FOLDER.exists():
            print("‚úÖ Directorio de output configurado correctamente")
        else:
            print("‚ùå Directorio de output no existe")
            return False
        
        # Verificar configuraci√≥n de modelos
        if config.WHISPER_MODEL:
            print(f"‚úÖ Modelo Whisper configurado: {config.WHISPER_MODEL}")
        else:
            print("‚ùå Modelo Whisper no configurado")
            return False
        
        if config.SENTENCE_TRANSFORMER_MODEL:
            print(f"‚úÖ Modelo Sentence Transformer configurado: {config.SENTENCE_TRANSFORMER_MODEL}")
        else:
            print("‚ùå Modelo Sentence Transformer no configurado")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def test_flask_app():
    """Probar que la aplicaci√≥n Flask se pueda crear"""
    print("\nüåê Probando aplicaci√≥n Flask...")
    
    try:
        from app import create_app
        app = create_app('development')
        
        if app:
            print("‚úÖ Aplicaci√≥n Flask creada correctamente")
            
            # Probar rutas principales
            with app.test_client() as client:
                response = client.get('/')
                if response.status_code == 200:
                    print("‚úÖ Ruta principal (/) responde correctamente")
                else:
                    print(f"‚ùå Ruta principal responde con c√≥digo: {response.status_code}")
                    return False
                
                response = client.get('/upload')
                if response.status_code == 200:
                    print("‚úÖ Ruta de upload (/upload) responde correctamente")
                else:
                    print(f"‚ùå Ruta de upload responde con c√≥digo: {response.status_code}")
                    return False
            
            return True
        else:
            print("‚ùå No se pudo crear la aplicaci√≥n Flask")
            return False
            
    except Exception as e:
        print(f"‚ùå Error creando aplicaci√≥n Flask: {e}")
        return False

def test_ai_models():
    """Probar que los modelos de IA se puedan cargar (opcional)"""
    print("\nü§ñ Probando modelos de IA (esto puede tardar)...")
    
    try:
        # Probar Whisper (modelo peque√±o para prueba)
        import whisper
        print("‚è≥ Cargando modelo Whisper tiny para prueba...")
        model = whisper.load_model("tiny")
        if model:
            print("‚úÖ Modelo Whisper cargado correctamente")
        else:
            print("‚ùå No se pudo cargar modelo Whisper")
            return False
        
        # Probar Sentence Transformers
        from sentence_transformers import SentenceTransformer
        print("‚è≥ Cargando modelo Sentence Transformer para prueba...")
        sentence_model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')
        if sentence_model:
            print("‚úÖ Modelo Sentence Transformer cargado correctamente")
        else:
            print("‚ùå No se pudo cargar modelo Sentence Transformer")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Advertencia: Error cargando modelos de IA: {e}")
        print("   Los modelos se descargar√°n autom√°ticamente en el primer uso")
        return True  # No es cr√≠tico para el funcionamiento b√°sico

def run_all_tests():
    """Ejecutar todas las pruebas"""
    print("üöÄ Iniciando pruebas de SyncDub MVP...\n")
    
    tests = [
        ("Importaciones", test_imports),
        ("Directorios", test_directories),
        ("Configuraci√≥n", test_config),
        ("Aplicaci√≥n Flask", test_flask_app),
        ("Modelos IA", test_ai_models)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error ejecutando prueba {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen
    print("\n" + "="*50)
    print("üìä RESUMEN DE PRUEBAS")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name:20} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("\nüéâ ¬°Todas las pruebas pasaron! SyncDub MVP est√° listo para usar.")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total - passed} pruebas fallaron. Revisa los errores arriba.")
        return False

if __name__ == "__main__":
    # Cambiar al directorio del proyecto si es necesario
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    
    success = run_all_tests()
    sys.exit(0 if success else 1)

